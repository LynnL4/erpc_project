/* 定义项目名称,也是所有生成的源码文件名前缀 */

/*
 * Generated by erpcgen 1.7.4 on Wed Jul 29 15:07:49 2020.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "erpcdemo_server.h"
#include <new>
#include "erpc_port.h"
#include "erpc_manually_constructed.h"

#if 10704 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;

#if ERPC_NESTED_CALLS_DETECTION
extern bool nestingDetection;
#endif

static ManuallyConstructed<DEMO_service> s_DEMO_service;

static ManuallyConstructed<Core0Interface_service> s_Core0Interface_service;


//! @brief Function to read struct binary_t
static void read_binary_t_struct(erpc::Codec * codec, binary_t * data);


// Read struct binary_t function implementation
static void read_binary_t_struct(erpc::Codec * codec, binary_t * data)
{
    uint8_t * data_local;
    codec->readBinary(&data->dataLength, &data_local);
    data->data = (uint8_t *) erpc_malloc(data->dataLength * sizeof(uint8_t));
    if (data->data == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }
    else
    {
        memcpy(data->data, data_local, data->dataLength);
    }
}


//! @brief Function to write struct binary_t
static void write_binary_t_struct(erpc::Codec * codec, const binary_t * data);


// Write struct binary_t function implementation
static void write_binary_t_struct(erpc::Codec * codec, const binary_t * data)
{
    codec->writeBinary(data->dataLength, data->data);
}


//! @brief Function to free space allocated inside struct binary_t
static void free_binary_t_struct(binary_t * data);


// Free space allocated inside struct binary_t function implementation
static void free_binary_t_struct(binary_t * data)
{
    if (data->data)
    {
        erpc_free(data->data);
    }
}



// Call the correct server shim based on method unique ID.
erpc_status_t DEMO_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory)
{
    switch (methodId)
    {
        case kDEMO_RD_demoHello_id:
            return RD_demoHello_shim(codec, messageFactory, sequence);

        case kDEMO_RD_demoHello2_id:
            return RD_demoHello2_shim(codec, messageFactory, sequence);

        case kDEMO_RD_demoHello3_id:
            return RD_demoHello3_shim(codec, messageFactory, sequence);

        default:
            return kErpcStatus_InvalidArgument;
    }
}

// Server shim for RD_demoHello of DEMO interface.
erpc_status_t DEMO_service::RD_demoHello_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    binary_t *txInput = NULL;
    txInput = (binary_t *) erpc_malloc(sizeof(binary_t));
    if (txInput == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }
    binary_t * result = NULL;

    // startReadMessage() was already called before this shim was invoked.

    read_binary_t_struct(codec, txInput);

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = RD_demoHello(txInput);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kDEMO_service_id, kDEMO_RD_demoHello_id, sequence);

        write_binary_t_struct(codec, result);

        err = codec->getStatus();
    }

    if (txInput)
    {
        free_binary_t_struct(txInput);
    }
    if (txInput)
    {
        erpc_free(txInput);
    }

    if (result)
    {
        free_binary_t_struct(result);
    }
    if (result)
    {
        erpc_free(result);
    }

    return err;
}

// Server shim for RD_demoHello2 of DEMO interface.
erpc_status_t DEMO_service::RD_demoHello2_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    binary_t *txInput = NULL;
    txInput = (binary_t *) erpc_malloc(sizeof(binary_t));
    if (txInput == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }
    binary_t *txOutput = NULL;
    lockErrors_t result;

    // startReadMessage() was already called before this shim was invoked.

    read_binary_t_struct(codec, txInput);

    txOutput = (binary_t *) erpc_malloc(sizeof(binary_t));
    if (txOutput == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = RD_demoHello2(txInput, txOutput);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kDEMO_service_id, kDEMO_RD_demoHello2_id, sequence);

        write_binary_t_struct(codec, txOutput);

        codec->write(static_cast<int32_t>(result));

        err = codec->getStatus();
    }

    if (txInput)
    {
        free_binary_t_struct(txInput);
    }
    if (txInput)
    {
        erpc_free(txInput);
    }

    if (txOutput)
    {
        free_binary_t_struct(txOutput);
    }
    if (txOutput)
    {
        erpc_free(txOutput);
    }

    return err;
}

// Server shim for RD_demoHello3 of DEMO interface.
erpc_status_t DEMO_service::RD_demoHello3_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    binary_t *txInput = NULL;
    txInput = (binary_t *) erpc_malloc(sizeof(binary_t));
    if (txInput == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }
    int8_t txOutput[64];
    int32_t size;
    lockErrors_t result;

    // startReadMessage() was already called before this shim was invoked.

    read_binary_t_struct(codec, txInput);

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = RD_demoHello3(txInput, txOutput, &size);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kDEMO_service_id, kDEMO_RD_demoHello3_id, sequence);

        for (uint32_t arrayCount0 = 0; arrayCount0 < 64; ++arrayCount0)
        {
            codec->write(txOutput[arrayCount0]);
        }

        codec->write(size);

        codec->write(static_cast<int32_t>(result));

        err = codec->getStatus();
    }

    if (txInput)
    {
        free_binary_t_struct(txInput);
    }
    if (txInput)
    {
        erpc_free(txInput);
    }

    return err;
}

// Call the correct server shim based on method unique ID.
erpc_status_t Core0Interface_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory)
{
    switch (methodId)
    {
        case kCore0Interface_myFun_id:
            return myFun_shim(codec, messageFactory, sequence);

        case kCore0Interface_callback1_id:
            return callback1_shim(codec, messageFactory, sequence);

        default:
            return kErpcStatus_InvalidArgument;
    }
}

// Server shim for myFun of Core0Interface interface.
erpc_status_t Core0Interface_service::myFun_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    callback1_t pCallback1_t = NULL;

    // startReadMessage() was already called before this shim was invoked.

    codec->readCallback((funPtr)(callback1), (funPtr *)(&pCallback1_t));

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        myFun(pCallback1_t);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif
    }

    return err;
}

// Server shim for callback1 of Core0Interface interface.
erpc_status_t Core0Interface_service::callback1_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t a;
    int32_t b;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&a);

    codec->read(&b);

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        callback1(a, b);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif
    }

    return err;
}

erpc_service_t create_DEMO_service()
{
    s_DEMO_service.construct();
    return s_DEMO_service.get();
}

void destroy_DEMO_service()
{
    s_DEMO_service.destroy();
}

erpc_service_t create_Core0Interface_service()
{
    s_Core0Interface_service.construct();
    return s_Core0Interface_service.get();
}

void destroy_Core0Interface_service()
{
    s_Core0Interface_service.destroy();
}
